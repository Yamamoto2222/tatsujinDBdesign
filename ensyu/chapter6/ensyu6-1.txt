演習6-1　ビットマップインデックスとハッシュインデックス
【問題文】
本文ではインデックスの種類として、B-treeインデックスのみを取り上げました。これ以外にも、リレーショナルデータベースで利用可能なインデックスには「ビットマップインデックス」や「ハッシュインデックス」といった補助的な存在します。これらのインデックスの長所と短所を調べてください。

【解答】
・ビットマップインデックス
参照URL：http://su-kun1899.hatenablog.com/entry/2015/03/18/233000
■概要
キーとなる値をビット列で用意するものである。ビット列はキーの値の数だけ用意される。
・値に該当するかどうかをビットマップで持つ
・あるカラムが「特定の値であるか」を0/1で表現する
・値とROW_IDのStart/Endをツリー構造で持つ

■長所
通常ではインデックスの設定に不向きとされる、カーディナリティが低い場合に検索性能が高く、インデックスの容量を少なくできる。
NULLの検索も可能 * AND、OR検索にも強い（論理和で検索できるから）

■短所
キーの値の数が多い場合にはビット列が増えるため不向きであることと、レコード追加がある場合に性能の低下が大きいことである。・データの登録・更新・削除時はブロック単位でロックがかかるため、性能劣化（待機の発生）が起こりやすい
（論理的には、ビットマップセグメントと考えてもそれほど差支えはなさそう）
・Aという値をBに変えた場合に、Aのビットマップを0にBのビットマップを1に変更する必要がある
・新規登録の場合はカラムが取りうる値すべてのビットマップに対してインサートが必要
・同値のビットマップは圧縮されるため、ブロック単位でのロック行数は膨大になる可能性がある
（0のビットマップが1億件連続していたとしたら、それは圧縮して同一ブロックに格納される）


・ハッシュインデックス
参照URL:http://gihyo.jp/dev/serial/01/sql_academy2/000702
■概要
B-treeインデックスを使った場合には、目的のレコードのアドレスを得るためには、数回のアクセスが必要になることがある。
これをハッシュ関数と呼ばれるものを使って、一回で目的のレコードのアドレスを取得できるようにしたものである。

チューニング技術としてB-treeの次に重要なのは，ハッシュ（hash）です。ハッシュとは「ごちゃまぜ」とか「細切れ」という意味で，ハッシュドビーフとかハッシュポテトなどの料理名にも使われています。

ハッシュのポイントは分散です。キー値に対して適当な関数を適用して，データを格納する先のアドレスを割り当てるのですが，このときポイントなのは，異なる値のキーに対しては，異なるアドレス（それもなるべく離れた）を割り振れるかどうかです。これができるほど，ハッシュ関数として優れているということになります

■長所
・データ分散が成功している場合、目的の1つのデータを見つけ出すために必要なコストは、1回のハッシュ関数の計算と1回のファイルアクセスのみで済む。
・衝突がないと仮定すれば、データ量がいくら増えても処理時間はつねに定数時間となる


■短所
・B-treeとは異なり、BETWEENなどの範囲検索には利用できない欠点がある。
・1つだけのキー値を対象とした操作ではない場合に向いていないこと。（したがって，不等号や範囲検索に対しては，何の役にも立ちません）
・ソート処理の助けにならないこと
