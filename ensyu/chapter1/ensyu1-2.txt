演習1-2　アプリケーション改修のタイプとコスト
【問題文】
12ページの「設計工程と開発モデル」において、開発モデルの主流であるウォーターフォールモデルでは、後半の工程に入ってからの手戻りが難しく、回収が高コストになりがちだ、と説明しました。
　今、みなさんが参加しているシステム開発のプロジェクトがテスト工程に差し掛かっているとします。すでにプロジェクトも佳境、カットオーバーも近づいてきています。そんな中、テストでシステムに次のような問題が発見されました

　・問題1
　性能試験において、ある夜間バッチ処理のSQLの性能が非常に悪く、用件上は1時間で終了するべきSQLが10時間かかることがわかった。
　・問題2
　画面からオンラインで出力する帳票に置いて、現在のレイアウトでは情報が不足していることがわかった。顧客との用件調整に漏れがあったことが原因だった。

　上記の問題に対して、実装および設計に対してどのような変更によって解決が可能か、思いつくだけの方法を提案してください。もっとも、まだデータベース設計について詳細に学んでいない現段階では、具体的な手段にまで落とし込むことは難しいでしょう。ここでは、大雑把な方針を考えてもらうだけでかまいません。そして少なくとも6章まで終えた後に、再度この演習問題に取り組んでみてください。

【解答】
■問題1
　【修正なしの方針】
　・顧客と要件の再調整を行い、想定以上の時間でも運用でカバーできないかの交渉を行う。
　【実装のみ修正（設計書の修正なし）】
　・SQLの性能改善を図る（サブクエリが使用されている箇所をなるべくJOINで対応するなど）
　（基本設計書にSQLが記載されていない前提。基本設計書の修正は行わず製造物のみ修正を行う）
　【設計からの修正】
　・DBの構造上、無駄がないかのチューニング（正規化）を図る
　（基本設計書、製造物の修正を行う）

■問題2
　【修正なしの方針または仕様の確認】
　・足りない情報について、本当に必要であるか、運用側でカバーできないかを顧客に相談する
　（もし追加のものが必要になった場合においてもコストを抑えるために最小限にすむ努力を行う）
　【要件定義から修正】
　・要件定義書からやり直し、改めて製造する。
　
　【保守フェーズにて対応するようにできないか、交渉する】
　足りなかった箇所については、一旦は修正せずに、保守フェーズ時の改修として
　コストを削減できないかを交渉する



